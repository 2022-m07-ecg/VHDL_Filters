-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
-- Generated on: 2023-01-12 19:08:05
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TestBenchStimulus: step ramp chirp 

-- Filter Specifications:
--
-- Sample Rate     : N/A (normalized frequency)
-- Response        : Lowpass
-- Specification   : Fp,Fst,Ap,Ast
-- Passband Edge   : 0.1
-- Passband Ripple : 3 dB
-- Stopband Edge   : 0.2
-- Stopband Atten. : 60 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time IIR Filter (integer)
-- -------------------------------
-- Filter Structure    : Direct-Form II, Second-Order Sections
-- Number of Sections  : 5
-- Stable              : Yes
-- Linear Phase        : No
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;


   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    integer; -- double
         filter_out                      :   OUT   integer  -- double
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF integer; -- double
  -- Constants
  CONSTANT scaleconst1                    : integer := 25; -- double
  CONSTANT coeff_b1_section1              : integer := 1000; -- double
  CONSTANT coeff_b2_section1              : integer := 2000; -- double
  CONSTANT coeff_b3_section1              : integer := 1000; -- double
  CONSTANT coeff_a2_section1              : integer := -1807; -- double
  CONSTANT coeff_a3_section1              : integer := 905; -- double
  CONSTANT scaleconst2                    : integer := 23; -- double
  CONSTANT coeff_b1_section2              : integer := 1000; -- double
  CONSTANT coeff_b2_section2              : integer := 2000; -- double
  CONSTANT coeff_b3_section2              : integer := 1000; -- double
  CONSTANT coeff_a2_section2              : integer := -1657; -- double
  CONSTANT coeff_a3_section2              : integer := 748; -- double
  CONSTANT scaleconst3                    : integer := 210; -- double
  CONSTANT coeff_b1_section3              : integer := 1000; -- double
  CONSTANT coeff_b2_section3              : integer := 2000; -- double
  CONSTANT coeff_b3_section3              : integer := 1000; -- double
  CONSTANT coeff_a2_section3              : integer := -1549; -- double
  CONSTANT coeff_a3_section3              : integer := 634; -- double
  CONSTANT scaleconst4                    : integer := 20; -- double
  CONSTANT coeff_b1_section4              : integer := 1000; -- double
  CONSTANT coeff_b2_section4              : integer := 2000; -- double
  CONSTANT coeff_b3_section4              : integer := 1000; -- double
  CONSTANT coeff_a2_section4              : integer := -1479; -- double
  CONSTANT coeff_a3_section4              : integer := 5591; -- double
  CONSTANT scaleconst5                    : integer := 20; -- double
  CONSTANT coeff_b1_section5              : integer := 1000; -- double
  CONSTANT coeff_b2_section5              : integer := 2000; -- double
  CONSTANT coeff_b3_section5              : integer := 1000; -- double
  CONSTANT coeff_a2_section5              : integer := -1000; -- double
  CONSTANT coeff_a3_section5              : integer := 523; -- double
  -- Signals
  SIGNAL input_register                   : integer := 0; -- double
  SIGNAL scale1                           : integer := 0; -- double
  SIGNAL scaletypeconvert1                : integer := 0; -- double
  -- Section 1 Signals 
  SIGNAL a1sum1                           : integer := 0; -- double
  SIGNAL a2sum1                           : integer := 0; -- double
  SIGNAL b1sum1                           : integer := 0; -- double
  SIGNAL b2sum1                           : integer := 0; -- double
  SIGNAL delay_section1                   : delay_pipeline_type(0 TO 1) := (0, 0); -- double
  SIGNAL inputconv1                       : integer := 0; -- double
  SIGNAL a2mul1                           : integer := 0; -- double
  SIGNAL a3mul1                           : integer := 0; -- double
  SIGNAL b1mul1                           : integer := 0; -- double
  SIGNAL b2mul1                           : integer := 0; -- double
  SIGNAL b3mul1                           : integer := 0; -- double
  SIGNAL scale2                           : integer := 0; -- double
  SIGNAL scaletypeconvert2                : integer := 0; -- double
  -- Section 2 Signals 
  SIGNAL a1sum2                           : integer := 0; -- double
  SIGNAL a2sum2                           : integer := 0; -- double
  SIGNAL b1sum2                           : integer := 0; -- double
  SIGNAL b2sum2                           : integer := 0; -- double
  SIGNAL delay_section2                   : delay_pipeline_type(0 TO 1) := (0, 0); -- double
  SIGNAL inputconv2                       : integer := 0; -- double
  SIGNAL a2mul2                           : integer := 0; -- double
  SIGNAL a3mul2                           : integer := 0; -- double
  SIGNAL b1mul2                           : integer := 0; -- double
  SIGNAL b2mul2                           : integer := 0; -- double
  SIGNAL b3mul2                           : integer := 0; -- double
  SIGNAL scale3                           : integer := 0; -- double
  SIGNAL scaletypeconvert3                : integer := 0; -- double
  -- Section 3 Signals 
  SIGNAL a1sum3                           : integer := 0; -- double
  SIGNAL a2sum3                           : integer := 0; -- double
  SIGNAL b1sum3                           : integer := 0; -- double
  SIGNAL b2sum3                           : integer := 0; -- double
  SIGNAL delay_section3                   : delay_pipeline_type(0 TO 1) := (0, 0); -- double
  SIGNAL inputconv3                       : integer := 0; -- double
  SIGNAL a2mul3                           : integer := 0; -- double
  SIGNAL a3mul3                           : integer := 0; -- double
  SIGNAL b1mul3                           : integer := 0; -- double
  SIGNAL b2mul3                           : integer := 0; -- double
  SIGNAL b3mul3                           : integer := 0; -- double
  SIGNAL scale4                           : integer := 0; -- double
  SIGNAL scaletypeconvert4                : integer := 0; -- double
  -- Section 4 Signals 
  SIGNAL a1sum4                           : integer := 0; -- double
  SIGNAL a2sum4                           : integer := 0; -- double
  SIGNAL b1sum4                           : integer := 0; -- double
  SIGNAL b2sum4                           : integer := 0; -- double
  SIGNAL delay_section4                   : delay_pipeline_type(0 TO 1) := (0, 0); -- double
  SIGNAL inputconv4                       : integer := 0; -- double
  SIGNAL a2mul4                           : integer := 0; -- double
  SIGNAL a3mul4                           : integer := 0; -- double
  SIGNAL b1mul4                           : integer := 0; -- double
  SIGNAL b2mul4                           : integer := 0; -- double
  SIGNAL b3mul4                           : integer := 0; -- double
  SIGNAL scale5                           : integer := 0; -- double
  SIGNAL scaletypeconvert5                : integer := 0; -- double
  -- Section 5 Signals 
  SIGNAL a1sum5                           : integer := 0; -- double
  SIGNAL a2sum5                           : integer := 0; -- double
  SIGNAL b1sum5                           : integer := 0; -- double
  SIGNAL b2sum5                           : integer := 0; -- double
  SIGNAL delay_section5                   : delay_pipeline_type(0 TO 1) := (0, 0); -- double
  SIGNAL inputconv5                       : integer := 0; -- double
  SIGNAL a2mul5                           : integer := 0; -- double
  SIGNAL a3mul5                           : integer := 0; -- double
  SIGNAL b1mul5                           : integer := 0; -- double
  SIGNAL b2mul5                           : integer := 0; -- double
  SIGNAL b3mul5                           : integer := 0; -- double
  SIGNAL output_typeconvert               : integer := 0; -- double
  SIGNAL output_register                  : integer := 0; -- double


BEGIN

  -- Block Statements
  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= filter_in;
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  scale1 <= input_register * scaleconst1;

  scaletypeconvert1 <= scale1;


  --   ------------------ Section 1 ------------------

  delay_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1(0) <= 0;
      delay_section1(1) <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section1(1) <= delay_section1(0);
        delay_section1(0) <= a1sum1;
      END IF;
    END IF;
  END PROCESS delay_process_section1;

  inputconv1 <= scaletypeconvert1;


  a2mul1 <= delay_section1(0) * coeff_a2_section1;

  a3mul1 <= delay_section1(1) * coeff_a3_section1;

  b1mul1 <= a1sum1;


  b2mul1 <= delay_section1(0) * coeff_b2_section1;

  b3mul1 <= delay_section1(1);


  a2sum1 <= inputconv1 - a2mul1;

  a1sum1 <= a2sum1 - a3mul1;

  b2sum1 <= b1mul1 + b2mul1;

  b1sum1 <= b2sum1 + b3mul1;

  scale2 <= b1sum1 * scaleconst2;

  scaletypeconvert2 <= scale2;


  --   ------------------ Section 2 ------------------

  delay_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2(0) <= 0;
      delay_section2(1) <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section2(1) <= delay_section2(0);
        delay_section2(0) <= a1sum2;
      END IF;
    END IF;
  END PROCESS delay_process_section2;

  inputconv2 <= scaletypeconvert2;


  a2mul2 <= delay_section2(0) * coeff_a2_section2;

  a3mul2 <= delay_section2(1) * coeff_a3_section2;

  b1mul2 <= a1sum2;


  b2mul2 <= delay_section2(0) * coeff_b2_section2;

  b3mul2 <= delay_section2(1);


  a2sum2 <= inputconv2 - a2mul2;

  a1sum2 <= a2sum2 - a3mul2;

  b2sum2 <= b1mul2 + b2mul2;

  b1sum2 <= b2sum2 + b3mul2;

  scale3 <= b1sum2 * scaleconst3;

  scaletypeconvert3 <= scale3;


  --   ------------------ Section 3 ------------------

  delay_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3(0) <= 0;
      delay_section3(1) <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section3(1) <= delay_section3(0);
        delay_section3(0) <= a1sum3;
      END IF;
    END IF;
  END PROCESS delay_process_section3;

  inputconv3 <= scaletypeconvert3;


  a2mul3 <= delay_section3(0) * coeff_a2_section3;

  a3mul3 <= delay_section3(1) * coeff_a3_section3;

  b1mul3 <= a1sum3;


  b2mul3 <= delay_section3(0) * coeff_b2_section3;

  b3mul3 <= delay_section3(1);


  a2sum3 <= inputconv3 - a2mul3;

  a1sum3 <= a2sum3 - a3mul3;

  b2sum3 <= b1mul3 + b2mul3;

  b1sum3 <= b2sum3 + b3mul3;

  scale4 <= b1sum3 * scaleconst4;

  scaletypeconvert4 <= scale4;


  --   ------------------ Section 4 ------------------

  delay_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section4(0) <= 0;
      delay_section4(1) <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section4(1) <= delay_section4(0);
        delay_section4(0) <= a1sum4;
      END IF;
    END IF;
  END PROCESS delay_process_section4;

  inputconv4 <= scaletypeconvert4;


  a2mul4 <= delay_section4(0) * coeff_a2_section4;

  a3mul4 <= delay_section4(1) * coeff_a3_section4;

  b1mul4 <= a1sum4;


  b2mul4 <= delay_section4(0) * coeff_b2_section4;

  b3mul4 <= delay_section4(1);


  a2sum4 <= inputconv4 - a2mul4;

  a1sum4 <= a2sum4 - a3mul4;

  b2sum4 <= b1mul4 + b2mul4;

  b1sum4 <= b2sum4 + b3mul4;

  scale5 <= b1sum4 * scaleconst5;

  scaletypeconvert5 <= scale5;


  --   ------------------ Section 5 ------------------

  delay_process_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section5(0) <= 0;
      delay_section5(1) <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section5(1) <= delay_section5(0);
        delay_section5(0) <= a1sum5;
      END IF;
    END IF;
  END PROCESS delay_process_section5;

  inputconv5 <= scaletypeconvert5;


  a2mul5 <= delay_section5(0) * coeff_a2_section5;

  a3mul5 <= delay_section5(1) * coeff_a3_section5;

  b1mul5 <= a1sum5;


  b2mul5 <= delay_section5(0) * coeff_b2_section5;

  b3mul5 <= delay_section5(1);


  a2sum5 <= inputconv5 - a2mul5;

  a1sum5 <= a2sum5 - a3mul5;

  b2sum5 <= b1mul5 + b2mul5;

  b1sum5 <= b2sum5 + b3mul5;

  output_typeconvert <= b1sum5;


  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= 0;
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= output_register;
END rtl;
